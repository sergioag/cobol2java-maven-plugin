package com.erpgenerator.cobol2java;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;

import java.io.File;

/**
 * Mojo to implement translating Cobol programs to Java sources during the generate-sources
 * phase.
 * @goal cobol2java
 * @phase generate-sources
 * @author Sergio Aguayo
 * @version 1.0
 */
public class Cobol2JavaMojo extends AbstractMojo
{
    /**
     * The current Maven project.
     * @parameter default-value="${project}"
     * @readonly
     * @required
     */
    private MavenProject project;

    /**
     * Specifies the package name for the data classes. Default value is <code>coboldataclasses</code>.
     * @parameter expression="${dataPackageName}"
     */
    private String dataPackageName;

    /**
     * Specifies the package name for the program classes. Default value is <code>cobolprogramclasses</code>.
     * @parameter expression="${programPackageName}"
     */
    private String programPackageName;

    /**
     * Specifies if the sources are in fixed or free format. Default value is <code>free</code>.
     * @parameter expression="${sourceFormat}"
     */
    private String sourceFormat;

    /**
     * The directory where the COBOL source files (<code>*.cbl</code>) are located.
     * @parameter expression="${sourceDirectory}" default-value="${basedir}/src/main/cobol"
     */
    private File sourceDirectory;

    /**
     * The directory where the files generated by cobol2java will be stored. This directory will be
     * registered as a compile source root of the project so the generated files will participate in
     * later build phases like compiling and packaging.
     * @parameter expression="${outputDirectory}" default-value="${project.build.directory}/generated-sources/cobol"
     */
    private File outputDirectory;

    @Override
    public void execute()
            throws MojoExecutionException, MojoFailureException
    {
        // Check sanity of parameters
        if( !sourceFormat.equals( "free" ) && !sourceFormat.equals( "fixed" ) )
            throw new MojoFailureException( "Invalid source format" );

        CobolSourceFileInfo[] sourceFileInfos = scanForSourceFiles();

        if( sourceFileInfos == null )
        {
            getLog().info( "Skipping non-existant source directory: " + sourceDirectory );
        }
        else if( sourceFileInfos.length <= 0 )
        {
            getLog().info( "Skipping - all source files are up to date" );
        }
        else {
            try {
                for( int i = 0; i < sourceFileInfos.length; i++ )
                    compileProgram( sourceFileInfos[i] );
            }
            catch( Exception ex )
            {
                throw new MojoExecutionException( "Failed to compile", ex );
            }
        }
    }

    private CobolSourceFileInfo[] scanForSourceFiles()
        throws MojoExecutionException
    {
        if( !sourceDirectory.isDirectory() )
            return null;

        CobolSourceFileInfo[] sourceFileInfos;

        try {
            CobolSourceDirectoryScanner scanner = new CobolSourceDirectoryScanner();
            scanner.setSourceDirectory( sourceDirectory );
            scanner.scan();
            sourceFileInfos = scanner.getIncludedSourceFiles();
        } catch( Exception ex )
        {
            throw new MojoExecutionException( "Failed to scan for source files: " + sourceDirectory, ex );
        }

        return sourceFileInfos;
    }

    private void compileProgram( CobolSourceFileInfo sourceFileInfo )
        throws Exception
    {
        Cobol2JavaInvoker invoker = new Cobol2JavaInvoker();
        invoker.setDataPackageName( dataPackageName );
        invoker.setOutputDirectory( outputDirectory );
        invoker.setProgramPackageName( programPackageName );
        invoker.setSourceFile( new File( sourceFileInfo.getSourceDirectory(), sourceFileInfo.getCobolFile() ) );
        invoker.setSourceFormat( sourceFormat );
        invoker.execute();
    }
}
